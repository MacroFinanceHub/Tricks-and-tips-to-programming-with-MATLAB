% Write a function called maxproduct that takes a matrix A and a positive 
%   integer scalar n as inputs and computes the largest product of n 
%   adjacent elements in the same direction in A. That is, we are looking
%   for products of consecutive elements in the same row, column, diagonal
%   or reverse diagonal. The function must return an n-by-2 matrix 
%   containing the row and column indexes ordered first by row and then by
%   column. If no such product exists, the function returns the empty 
%   array. For example, valid outputs for a max product of 3 neighbors in 
%   four different matrices might be [2 2; 2 3; 2 4] or [1 1; 2 1; 3 1] or
%   [3 5; 4 4; 5 3] or [4 2; 5 3; 6 4]. If there are multiple products 
%   with the same maximum value, return the first one you find. 
%
% input 1: A, a matrix
% input 2: n, a positive integer scalar
% output: maxprod, the alrgest product of n adjacent elements in A


function [maxprod] = maxproduct(A,n)
   
    [mpr,maxpR]=mpRows(A,n); if mpr>-Inf maxpR=sortrows(maxpR,1); end;
    [mpc,maxpC]=mpRows(A',n); if mpc>-Inf maxpC=sortrows(fliplr(maxpC),1);end;
    [mpd,maxpD]=mpDiags(A,n); if mpd>-Inf maxpD=sortrows(maxpD,1); end;
    [mpod,maxpOD]=mpDiags(fliplr(A),n); if mpod >-Inf maxpOD=sortrows(maxpOD,1);end;

    for i=1:size(maxpOD,1)
        maxpOD(i,2)=size(A,2)-maxpOD(i,2)+1;
    end
    [mp,index]=max([mpr,mpc,mpd,mpod]);
    switch index
        case 1
            maxprod=maxpR;
        case 2
            maxprod=maxpC;
        case 3
            maxprod=maxpD;
        case 4
            maxprod=maxpOD;
    end
end

